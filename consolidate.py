import os
import csv
from tqdm import tqdm
from openai import OpenAI
import json
from dotenv import load_dotenv

# Setting directories
llm_analyzed_directory = "./LLM-analyzed"  # Folder with text files generated by LLM
output_csv_path = "./Consolidated_Tariff_Data.csv"

load_dotenv()
api_key=os.getenv('OPENAI_API_KEY')

client = OpenAI(api_key=api_key)

# OpenAI API client setup
api_key = os.environ.get("MY_OPENAI_KEY")

# Defining column headers for the consolidated CSV
columns = [
    "Utility_Name", "0-50 kWh", "50-100 kWh", "100-150 kWh", "150-200 kWh",
    "200-250 kWh", "250-300 kWh", "300-350 kWh", "350-400 kWh", "400-450 kWh",
    "450-500 kWh", "500+ kWh", "EV Tariff Notes", "Time-of-Day Tariff Notes", "Other"
]

# Function to analyze text using OpenAI and extract the relevant information
def analyze_tariff_file(content, utility_name):
    prompt = f"""
    The following is an analysis from a utility company named {utility_name}.
    Extract electricity rates across the given slabs: 0-50 kWh, 50-100 kWh, 100-150 kWh, 150-200 kWh, 200-250 kWh, 250-300 kWh, 300-350 kWh, 350-400 kWh, 400-450 kWh, 450-500 kWh, and 500+ kWh.
    Also mention if there's any EV tariff and Time of Day tariff information.
    Provide any other relevant notes in an organized manner.

    {content}

    Output the results in the following JSON format:
    {{
        "Utility_Name": "{utility_name}",
        "0-50 kWh": "<rate>",
        "50-100 kWh": "<rate>",
        "100-150 kWh": "<rate>",
        "150-200 kWh": "<rate>",
        "200-250 kWh": "<rate>",
        "250-300 kWh": "<rate>",
        "300-350 kWh": "<rate>",
        "350-400 kWh": "<rate>",
        "400-450 kWh": "<rate>",
        "450-500 kWh": "<rate>",
        "500+ kWh": "<rate>",
        "EV Tariff Notes": "<notes>",
        "Time-of-Day Tariff Notes": "<notes>",
        "Other": "<other notes>"
    }}
    """

    response = client.chat.completions.create(model="gpt-4",
    messages=[
        {"role": "system", "content": "You are a helpful assistant."},
        {"role": "user", "content": prompt}
    ],
    max_tokens=500,
    temperature=0.2)

    response_content = response.choices[0].message.content.strip()

    # Debugging print to see what response is being generated
    print(f"Response for {utility_name}: {response_content}")

    try:
        return json.loads(response_content)
    except json.JSONDecodeError as e:
        print(f"Failed to parse response for {utility_name}: {e}")
        return None

# Writing the consolidated CSV file
with open(output_csv_path, mode="w", newline="") as csv_file:
    writer = csv.DictWriter(csv_file, fieldnames=columns)
    writer.writeheader()

    # Iterate over all text files in the analyzed directory
    for txt_file in tqdm(os.listdir(llm_analyzed_directory), desc="Processing TXT files"):
        if txt_file.endswith("_analysis.txt"):
            utility_name = txt_file.replace("_analysis.txt", "")
            file_path = os.path.join(llm_analyzed_directory, txt_file)

            # Read the content from the file
            with open(file_path, "r") as file:
                content = file.read()

            # Use OpenAI to analyze the text
            try:
                tariff_data = analyze_tariff_file(content, utility_name)
                if tariff_data:
                    writer.writerow(tariff_data)
            except Exception as e:
                print(f"Failed to analyze {txt_file}: {e}")

print(f"Consolidated CSV file created at: {output_csv_path}")
